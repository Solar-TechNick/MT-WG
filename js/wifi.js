/**
 * WiFi Configuration Generator for MikroTik RouterOS
 * Generates WiFi configuration scripts for 2.4GHz and 5GHz networks
 */

class WiFiGenerator {
    constructor() {
        this.configs = {};
    }

    /**
     * Generate WiFi configuration
     * @param {object} data Configuration data
     * @returns {Array} Array of configuration objects
     */
    generate(data) {
        const configs = [];

        // Generate 2.4GHz configuration
        if (data.ssid_2ghz && data.password_2ghz) {
            configs.push({
                name: `WiFi-2.4GHz-${data.ssid_2ghz}`,
                content: this.generate2GHzConfig(data)
            });
        }

        // Generate 5GHz configuration
        if (data.ssid_5ghz && data.password_5ghz) {
            configs.push({
                name: `WiFi-5GHz-${data.ssid_5ghz}`,
                content: this.generate5GHzConfig(data)
            });
        }

        // Generate guest networks if enabled
        if (data.guestEnabled && data.guestNetworks && data.guestNetworks.length > 0) {
            data.guestNetworks.forEach((guest, index) => {
                configs.push({
                    name: `WiFi-Guest-${guest.index}-${guest.ssid}`,
                    content: this.generateGuestConfig(guest, data, index + 1)
                });
            });
        }

        // Generate combined script
        if (configs.length > 0) {
            configs.push({
                name: 'WiFi-Complete-Configuration',
                content: this.generateCompleteConfig(data)
            });
        }

        return configs;
    }

    /**
     * Generate 2.4GHz WiFi configuration
     */
    generate2GHzConfig(data) {
        const script = [];

        script.push('# MikroTik RouterOS WiFi Configuration - 2.4GHz');
        script.push('# Generated by MikroTik RouterOS Configurator');
        script.push('# ' + new Date().toISOString().split('T')[0]);
        script.push('');

        // Set country for regulatory compliance
        script.push('# Set country for regulatory compliance');
        script.push(`/interface wireless set ${data.interface_2ghz} country="${data.country}"`);
        script.push('');

        // Configure wireless interface
        script.push('# Configure 2.4GHz wireless interface');
        script.push(`/interface wireless set ${data.interface_2ghz} \\`);
        script.push(`  mode=ap-bridge \\`);
        script.push(`  ssid="${data.ssid_2ghz}" \\`);
        script.push(`  frequency=auto \\`);
        script.push(`  band=2ghz-b/g/n \\`);
        script.push(`  channel-width=${data.bandwidth_2ghz} \\`);

        if (data.channel_2ghz !== 'auto') {
            script.push(`  frequency-mode=manual-txpower \\`);
            script.push(`  channel=${data.channel_2ghz} \\`);
        } else {
            script.push(`  frequency-mode=regulatory-domain \\`);
        }

        script.push(`  wireless-protocol=802.11 \\`);
        script.push(`  ${data.hideSsid_2ghz ? 'hide-ssid=yes' : 'hide-ssid=no'}`);
        script.push('');

        // Security profile
        script.push('# Security configuration');
        script.push(`/interface wireless security-profiles add \\`);
        script.push(`  name="${data.ssid_2ghz}-security" \\`);
        script.push(`  mode=${this.getSecurityMode(data.security_2ghz)} \\`);
        script.push(`  authentication-types=${this.getAuthTypes(data.security_2ghz)} \\`);
        script.push(`  unicast-ciphers=${this.getCiphers(data.security_2ghz)} \\`);
        script.push(`  group-ciphers=${this.getCiphers(data.security_2ghz)} \\`);
        script.push(`  wpa2-pre-shared-key="${data.password_2ghz}"`);
        script.push('');

        // Apply security profile
        script.push(`/interface wireless set ${data.interface_2ghz} \\`);
        script.push(`  security-profile="${data.ssid_2ghz}-security"`);
        script.push('');

        // Enable interface
        script.push('# Enable wireless interface');
        script.push(`/interface wireless enable ${data.interface_2ghz}`);
        script.push('');

        script.push('# Configuration complete - WiFi 2.4GHz is now active');

        return script.join('\n');
    }

    /**
     * Generate 5GHz WiFi configuration
     */
    generate5GHzConfig(data) {
        const script = [];

        script.push('# MikroTik RouterOS WiFi Configuration - 5GHz');
        script.push('# Generated by MikroTik RouterOS Configurator');
        script.push('# ' + new Date().toISOString().split('T')[0]);
        script.push('');

        // Set country for regulatory compliance
        script.push('# Set country for regulatory compliance');
        script.push(`/interface wireless set ${data.interface_5ghz} country="${data.country}"`);
        script.push('');

        // Configure wireless interface
        script.push('# Configure 5GHz wireless interface');
        script.push(`/interface wireless set ${data.interface_5ghz} \\`);
        script.push(`  mode=ap-bridge \\`);
        script.push(`  ssid="${data.ssid_5ghz}" \\`);
        script.push(`  frequency=auto \\`);
        script.push(`  band=5ghz-a/n/ac \\`);
        script.push(`  channel-width=${data.bandwidth_5ghz} \\`);

        if (data.channel_5ghz !== 'auto') {
            script.push(`  frequency-mode=manual-txpower \\`);
            script.push(`  channel=${data.channel_5ghz} \\`);
        } else {
            script.push(`  frequency-mode=regulatory-domain \\`);
        }

        script.push(`  wireless-protocol=802.11 \\`);
        script.push(`  ${data.hideSsid_5ghz ? 'hide-ssid=yes' : 'hide-ssid=no'}`);
        script.push('');

        // Security profile
        script.push('# Security configuration');
        script.push(`/interface wireless security-profiles add \\`);
        script.push(`  name="${data.ssid_5ghz}-security" \\`);
        script.push(`  mode=${this.getSecurityMode(data.security_5ghz)} \\`);
        script.push(`  authentication-types=${this.getAuthTypes(data.security_5ghz)} \\`);
        script.push(`  unicast-ciphers=${this.getCiphers(data.security_5ghz)} \\`);
        script.push(`  group-ciphers=${this.getCiphers(data.security_5ghz)} \\`);
        script.push(`  wpa2-pre-shared-key="${data.password_5ghz}"`);
        script.push('');

        // Apply security profile
        script.push(`/interface wireless set ${data.interface_5ghz} \\`);
        script.push(`  security-profile="${data.ssid_5ghz}-security"`);
        script.push('');

        // Enable interface
        script.push('# Enable wireless interface');
        script.push(`/interface wireless enable ${data.interface_5ghz}`);
        script.push('');

        script.push('# Configuration complete - WiFi 5GHz is now active');

        return script.join('\n');
    }

    /**
     * Generate guest network configuration
     */
    generateGuestConfig(guest, mainData, guestNumber) {
        const script = [];

        script.push(`# MikroTik RouterOS WiFi Configuration - Guest Network ${guestNumber}`);
        script.push('# Generated by MikroTik RouterOS Configurator');
        script.push('# ' + new Date().toISOString().split('T')[0]);
        script.push('');
        script.push(`# Guest SSID: ${guest.ssid}`);
        script.push(`# Band: ${guest.band === '2ghz' ? '2.4GHz' : '5GHz'}`);
        script.push('');

        // Determine interface based on band
        const interfaceName = guest.band === '5ghz' ?
            (mainData.interface_5ghz || 'wlan2') :
            (mainData.interface_2ghz || 'wlan1');

        // Guest network security profile
        script.push(`# Guest network ${guestNumber} security profile`);
        script.push(`/interface wireless security-profiles add \\`);
        script.push(`  name="guest-${guestNumber}-security" \\`);
        script.push(`  mode=${this.getSecurityMode(guest.security)} \\`);
        script.push(`  authentication-types=${this.getAuthTypes(guest.security)} \\`);
        script.push(`  unicast-ciphers=${this.getCiphers(guest.security)} \\`);
        script.push(`  group-ciphers=${this.getCiphers(guest.security)} \\`);
        script.push(`  wpa2-pre-shared-key="${guest.password}"`);
        script.push('');

        // Virtual AP for guest network
        script.push(`# Create virtual AP for guest network ${guestNumber}`);
        script.push(`/interface wireless add \\`);
        script.push(`  master-interface=${interfaceName} \\`);
        script.push(`  name=guest-${guestNumber} \\`);
        script.push(`  ssid="${guest.ssid}" \\`);
        script.push(`  security-profile="guest-${guestNumber}-security" \\`);
        script.push(`  mode=ap-bridge`);
        script.push('');

        // Client isolation
        if (guest.isolation) {
            script.push(`# Enable client isolation for guest network ${guestNumber}`);
            script.push('/interface wireless access-list add \\');
            script.push(`  interface=guest-${guestNumber} \\`);
            script.push('  forwarding=no \\');
            script.push(`  comment="Guest ${guestNumber} Client Isolation"`);
            script.push('');
        }

        // Firewall rules for guest network (if blockLAN is enabled)
        if (guest.blockLAN) {
            script.push(`# Firewall rules - Block access to local network for guest ${guestNumber}`);
            script.push('/ip firewall filter add \\');
            script.push('  chain=forward \\');
            script.push(`  in-interface=guest-${guestNumber} \\`);
            script.push('  dst-address=192.168.0.0/16 \\');
            script.push('  action=drop \\');
            script.push(`  comment="Block guest ${guestNumber} to LAN"`);
            script.push('');

            script.push('/ip firewall filter add \\');
            script.push('  chain=forward \\');
            script.push(`  in-interface=guest-${guestNumber} \\`);
            script.push('  dst-address=172.16.0.0/12 \\');
            script.push('  action=drop \\');
            script.push(`  comment="Block guest ${guestNumber} to LAN"`);
            script.push('');

            script.push('/ip firewall filter add \\');
            script.push('  chain=forward \\');
            script.push(`  in-interface=guest-${guestNumber} \\`);
            script.push('  dst-address=10.0.0.0/8 \\');
            script.push('  action=drop \\');
            script.push(`  comment="Block guest ${guestNumber} to LAN"`);
            script.push('');
        }

        script.push(`# Allow guest network ${guestNumber} internet access`);
        script.push('/ip firewall filter add \\');
        script.push('  chain=forward \\');
        script.push(`  in-interface=guest-${guestNumber} \\`);
        script.push('  action=accept \\');
        script.push(`  comment="Allow guest ${guestNumber} to Internet"`);
        script.push('');

        script.push(`# Configuration complete - Guest network ${guestNumber} is ready`);

        return script.join('\n');
    }

    /**
     * Generate complete WiFi configuration script
     */
    generateCompleteConfig(data) {
        const script = [];

        script.push('# MikroTik RouterOS Complete WiFi Configuration');
        script.push('# Generated by MikroTik RouterOS Configurator');
        script.push('# ' + new Date().toISOString().split('T')[0]);
        script.push('');
        script.push('# This script configures:');
        if (data.ssid_2ghz) script.push('#   - 2.4GHz WiFi: ' + data.ssid_2ghz);
        if (data.ssid_5ghz) script.push('#   - 5GHz WiFi: ' + data.ssid_5ghz);
        if (data.guestEnabled && data.guestNetworks) {
            data.guestNetworks.forEach((guest, index) => {
                script.push(`#   - Guest Network ${index + 1}: ${guest.ssid} (${guest.band === '2ghz' ? '2.4GHz' : '5GHz'})`);
            });
        }
        script.push('');
        script.push('# ========================================');
        script.push('');

        // Country setting
        script.push('# Set country for regulatory compliance');
        script.push(`/interface wireless set ${data.interface_2ghz} country="${data.country}"`);
        script.push(`/interface wireless set ${data.interface_5ghz} country="${data.country}"`);
        script.push('');

        // 2.4GHz Configuration
        if (data.ssid_2ghz && data.password_2ghz) {
            script.push('# ========================================');
            script.push('# 2.4GHz Configuration');
            script.push('# ========================================');
            script.push('');

            script.push(this.generate2GHzConfigSection(data));
            script.push('');
        }

        // 5GHz Configuration
        if (data.ssid_5ghz && data.password_5ghz) {
            script.push('# ========================================');
            script.push('# 5GHz Configuration');
            script.push('# ========================================');
            script.push('');

            script.push(this.generate5GHzConfigSection(data));
            script.push('');
        }

        // Guest Networks
        if (data.guestEnabled && data.guestNetworks && data.guestNetworks.length > 0) {
            data.guestNetworks.forEach((guest, index) => {
                script.push('# ========================================');
                script.push(`# Guest Network ${index + 1} Configuration`);
                script.push('# ========================================');
                script.push('');

                script.push(this.generateGuestConfig(guest, data, index + 1));
                script.push('');
            });
        }

        script.push('# ========================================');
        script.push('# Configuration Complete');
        script.push('# ========================================');
        script.push('');
        script.push('# All WiFi networks are now configured and active');

        return script.join('\n');
    }

    /**
     * Helper methods for configuration sections
     */
    generate2GHzConfigSection(data) {
        const lines = [];

        lines.push(`/interface wireless security-profiles add \\`);
        lines.push(`  name="${data.ssid_2ghz}-security" \\`);
        lines.push(`  mode=${this.getSecurityMode(data.security_2ghz)} \\`);
        lines.push(`  authentication-types=${this.getAuthTypes(data.security_2ghz)} \\`);
        lines.push(`  unicast-ciphers=${this.getCiphers(data.security_2ghz)} \\`);
        lines.push(`  group-ciphers=${this.getCiphers(data.security_2ghz)} \\`);
        lines.push(`  wpa2-pre-shared-key="${data.password_2ghz}"`);
        lines.push('');

        lines.push(`/interface wireless set ${data.interface_2ghz} \\`);
        lines.push(`  mode=ap-bridge \\`);
        lines.push(`  ssid="${data.ssid_2ghz}" \\`);
        lines.push(`  band=2ghz-b/g/n \\`);
        lines.push(`  channel-width=${data.bandwidth_2ghz} \\`);
        lines.push(`  ${data.hideSsid_2ghz ? 'hide-ssid=yes' : 'hide-ssid=no'} \\`);
        lines.push(`  security-profile="${data.ssid_2ghz}-security"`);
        lines.push('');

        lines.push(`/interface wireless enable ${data.interface_2ghz}`);

        return lines.join('\n');
    }

    generate5GHzConfigSection(data) {
        const lines = [];

        lines.push(`/interface wireless security-profiles add \\`);
        lines.push(`  name="${data.ssid_5ghz}-security" \\`);
        lines.push(`  mode=${this.getSecurityMode(data.security_5ghz)} \\`);
        lines.push(`  authentication-types=${this.getAuthTypes(data.security_5ghz)} \\`);
        lines.push(`  unicast-ciphers=${this.getCiphers(data.security_5ghz)} \\`);
        lines.push(`  group-ciphers=${this.getCiphers(data.security_5ghz)} \\`);
        lines.push(`  wpa2-pre-shared-key="${data.password_5ghz}"`);
        lines.push('');

        lines.push(`/interface wireless set ${data.interface_5ghz} \\`);
        lines.push(`  mode=ap-bridge \\`);
        lines.push(`  ssid="${data.ssid_5ghz}" \\`);
        lines.push(`  band=5ghz-a/n/ac \\`);
        lines.push(`  channel-width=${data.bandwidth_5ghz} \\`);
        lines.push(`  ${data.hideSsid_5ghz ? 'hide-ssid=yes' : 'hide-ssid=no'} \\`);
        lines.push(`  security-profile="${data.ssid_5ghz}-security"`);
        lines.push('');

        lines.push(`/interface wireless enable ${data.interface_5ghz}`);

        return lines.join('\n');
    }

    generateGuestConfigSection(data) {
        return this.generateGuestConfig(data);
    }

    /**
     * Get security mode based on selection
     */
    getSecurityMode(security) {
        const modes = {
            'wpa2-psk': 'dynamic-keys',
            'wpa3-psk': 'dynamic-keys',
            'wpa2-wpa3-psk': 'dynamic-keys'
        };
        return modes[security] || 'dynamic-keys';
    }

    /**
     * Get authentication types based on security selection
     */
    getAuthTypes(security) {
        const types = {
            'wpa2-psk': 'wpa2-psk',
            'wpa3-psk': 'wpa2-psk,wpa3-psk',
            'wpa2-wpa3-psk': 'wpa2-psk,wpa3-psk'
        };
        return types[security] || 'wpa2-psk';
    }

    /**
     * Get ciphers based on security selection
     */
    getCiphers(security) {
        if (security === 'wpa3-psk' || security === 'wpa2-wpa3-psk') {
            return 'aes-ccm';
        }
        return 'aes-ccm';
    }
}

// Initialize global WiFi generator
window.WiFiGenerator = new WiFiGenerator();
