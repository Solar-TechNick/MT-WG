/**
 * OPNsense WireGuard Configuration Generator
 * Generates OPNsense configuration with CLI commands and XML snippets
 */

class OPNsenseGenerator {
    constructor() {
        this.instanceCounter = 0;
    }

    /**
     * Generate OPNsense configuration for both client-server and site-to-site
     * @param {object} data Configuration data
     * @returns {Array} Array of OPNsense configuration objects
     */
    generate(data) {
        if (data.type === 'client-server') {
            return this.generateClientServerConfig(data);
        } else if (data.type === 'site-to-site') {
            return this.generateSiteToSiteConfig(data);
        }
        return [];
    }

    /**
     * Generate client-server OPNsense configuration
     * @param {object} data Configuration data
     * @returns {Array} OPNsense configurations
     */
    generateClientServerConfig(data) {
        const serverConfig = this.createServerConfig(data);
        
        return [
            {
                name: 'OPNsense Server Configuration',
                content: serverConfig
            }
        ];
    }

    /**
     * Generate site-to-site OPNsense configuration
     * @param {object} data Configuration data
     * @returns {Array} OPNsense configurations
     */
    generateSiteToSiteConfig(data) {
        const configs = [];
        
        if (data.sites && data.sites.length > 0) {
            data.sites.forEach((site, index) => {
                const siteConfig = this.createSiteConfig(data, site, index);
                
                configs.push({
                    name: `OPNsense Site ${index + 1} Configuration`,
                    content: siteConfig
                });
            });
        }
        
        return configs;
    }

    /**
     * Create OPNsense server configuration for client-server setup
     * @param {object} data Configuration data
     * @returns {string} OPNsense configuration
     */
    createServerConfig(data) {
        let config = '';
        
        config += '# OPNsense WireGuard Server Configuration\n';
        config += '# Generated by MT-WG Configurator\n';
        config += '# Follow these steps to configure WireGuard on OPNsense\n\n';
        
        // Prerequisites
        config += '=== PREREQUISITES ===\n';
        config += '1. Install WireGuard plugin: System > Firmware > Plugins > os-wireguard\n';
        config += '2. Restart OPNsense after plugin installation\n\n';
        
        // CLI Commands Section
        config += '=== CLI COMMANDS ===\n';
        config += '# Connect via SSH and run these commands:\n\n';
        
        // Generate keypair via CLI
        config += '# Generate server keypair\n';
        config += 'configctl wireguard genkey\n';
        config += '# Note: Save the generated private and public keys\n\n';
        
        // Web GUI Configuration
        config += '=== WEB GUI CONFIGURATION ===\n\n';
        
        config += '1. WIREGUARD INSTANCE SETUP:\n';
        config += '   Navigate to: VPN > WireGuard > Instances\n';
        config += '   - Click "+" to add new instance\n';
        config += '   - Enable: ✓ Checked\n';
        config += `   - Name: ${data.server.name || 'WireGuard-Server'}\n`;
        config += `   - Public Key: [Server Public Key from CLI]\n`;
        config += `   - Private Key: [Server Private Key from CLI]\n`;
        config += `   - Listen Port: ${data.server.port}\n`;
        config += `   - Tunnel Address: ${data.server.ip}\n`;
        config += `   - DNS Servers: ${data.dns?.join(', ') || '1.1.1.1, 8.8.8.8'}\n`;
        if (data.interface?.mtu && data.interface.mtu !== 1420) {
            config += `   - MTU: ${data.interface.mtu}\n`;
        }
        config += '   - Click "Save"\n\n';
        
        // Client peers configuration
        if (data.clients && data.clients.length > 0) {
            config += '2. CLIENT PEERS CONFIGURATION:\n';
            config += '   Navigate to: VPN > WireGuard > Peers\n\n';
            
            data.clients.forEach((client, index) => {
                config += `   Client ${index + 1} (${client.name}):\n`;
                config += '   - Click "+" to add new peer\n';
                config += '   - Enable: ✓ Checked\n';
                config += `   - Name: ${client.name}\n`;
                config += `   - Public Key: ${client.publicKey || '[Client Public Key]'}\n`;
                config += `   - Allowed IPs: ${client.ip}\n`;
                config += `   - Instance: ${data.server.name || 'WireGuard-Server'}\n`;
                if (client.psk) {
                    config += `   - Pre-shared Key: ${client.psk}\n`;
                }
                config += '   - Click "Save"\n\n';
            });
        }
        
        // Interface assignment
        config += '3. INTERFACE ASSIGNMENT:\n';
        config += '   Navigate to: Interfaces > Assignments\n';
        config += `   - Add WireGuard interface (wg0)\n`;
        config += '   - Enable interface\n';
        config += `   - Set description: ${data.server.name || 'WireGuard-Server'}\n\n`;
        
        // Firewall rules
        if (data.options?.generateFirewall) {
            config += this.generateFirewallConfig(data);
        }
        
        // NAT configuration
        if (data.options?.enableNAT) {
            config += this.generateNATConfig(data);
        }
        
        // XML Configuration Section
        config += '=== XML CONFIGURATION SNIPPET ===\n';
        config += '# Add this to your config.xml (requires manual configuration)\n\n';
        config += this.generateServerXMLConfig(data);
        
        // Client configuration templates
        config += '\n=== CLIENT CONFIGURATION FILES ===\n';
        config += '# Generate these files for your clients:\n\n';
        
        if (data.clients && data.clients.length > 0) {
            data.clients.forEach((client, index) => {
                config += `# ${client.name}.conf\n`;
                config += '[Interface]\n';
                config += `PrivateKey = ${client.privateKey || '[Client Private Key]'}\n`;
                config += `Address = ${client.ip}\n`;
                config += `DNS = ${data.dns?.join(', ') || '1.1.1.1, 8.8.8.8'}\n`;
                if (data.interface?.mtu && data.interface.mtu !== 1420) {
                    config += `MTU = ${data.interface.mtu}\n`;
                }
                config += '\n[Peer]\n';
                config += `PublicKey = ${data.server.keys?.publicKey || '[Server Public Key]'}\n`;
                config += `Endpoint = ${data.server.endpoint}:${data.server.port}\n`;
                config += `AllowedIPs = ${data.allowedIPs || '0.0.0.0/0'}\n`;
                if (client.psk) {
                    config += `PreSharedKey = ${client.psk}\n`;
                }
                if (data.options?.keepalive && data.options.keepalive > 0) {
                    config += `PersistentKeepalive = ${data.options.keepalive}\n`;
                }
                config += '\n\n';
            });
        }
        
        return config;
    }

    /**
     * Create OPNsense site configuration for site-to-site setup
     * @param {object} data Configuration data
     * @param {object} site Site-specific data
     * @param {number} siteIndex Site index
     * @returns {string} OPNsense configuration
     */
    createSiteConfig(data, site, siteIndex) {
        let config = '';
        
        config += `# OPNsense WireGuard Site ${siteIndex + 1} Configuration\n`;
        config += '# Generated by MT-WG Configurator\n\n';
        
        // Prerequisites
        config += '=== PREREQUISITES ===\n';
        config += '1. Install WireGuard plugin: System > Firmware > Plugins > os-wireguard\n';
        config += '2. Restart OPNsense after plugin installation\n\n';
        
        // CLI Commands
        config += '=== CLI COMMANDS ===\n';
        config += '# Generate site keypair\n';
        config += 'configctl wireguard genkey\n\n';
        
        // Web GUI Configuration
        config += '=== WEB GUI CONFIGURATION ===\n\n';
        
        config += '1. WIREGUARD INSTANCE SETUP:\n';
        config += '   Navigate to: VPN > WireGuard > Instances\n';
        config += '   - Click "+" to add new instance\n';
        config += '   - Enable: ✓ Checked\n';
        config += `   - Name: Site-${siteIndex + 1}-${site.name || 'WireGuard'}\n`;
        config += `   - Public Key: [Site ${siteIndex + 1} Public Key]\n`;
        config += `   - Private Key: [Site ${siteIndex + 1} Private Key]\n`;
        config += `   - Listen Port: ${site.listenPort || 51820}\n`;
        config += `   - Tunnel Address: ${site.localIP}\n`;
        if (data.interface?.mtu && data.interface.mtu !== 1420) {
            config += `   - MTU: ${data.interface.mtu}\n`;
        }
        config += '   - Click "Save"\n\n';
        
        // Peer configuration for other sites
        if (data.sites && data.sites.length > 1) {
            config += '2. REMOTE SITE PEERS CONFIGURATION:\n';
            config += '   Navigate to: VPN > WireGuard > Peers\n\n';
            
            data.sites.forEach((remoteSite, remoteIndex) => {
                if (remoteIndex !== siteIndex) {
                    config += `   Remote Site ${remoteIndex + 1} (${remoteSite.name}):\n`;
                    config += '   - Click "+" to add new peer\n';
                    config += '   - Enable: ✓ Checked\n';
                    config += `   - Name: Site-${remoteIndex + 1}-${remoteSite.name}\n`;
                    config += `   - Public Key: ${remoteSite.publicKey || '[Remote Site Public Key]'}\n`;
                    config += `   - Endpoint: ${remoteSite.publicEndpoint}:${remoteSite.listenPort || 51820}\n`;
                    config += `   - Allowed IPs: ${remoteSite.allowedIPs || remoteSite.localNetwork}\n`;
                    config += `   - Instance: Site-${siteIndex + 1}-${site.name || 'WireGuard'}\n`;
                    if (remoteSite.psk) {
                        config += `   - Pre-shared Key: ${remoteSite.psk}\n`;
                    }
                    if (data.options?.keepalive && data.options.keepalive > 0) {
                        config += `   - Persistent Keepalive: ${data.options.keepalive}\n`;
                    }
                    config += '   - Click "Save"\n\n';
                }
            });
        }
        
        // Interface assignment
        config += '3. INTERFACE ASSIGNMENT:\n';
        config += '   Navigate to: Interfaces > Assignments\n';
        config += `   - Add WireGuard interface (wg${siteIndex})\n`;
        config += '   - Enable interface\n';
        config += `   - Set description: Site-${siteIndex + 1}-${site.name}\n\n`;
        
        // Static routes
        config += '4. STATIC ROUTES:\n';
        config += '   Navigate to: System > Routes > Static\n';
        if (data.sites && data.sites.length > 1) {
            data.sites.forEach((remoteSite, remoteIndex) => {
                if (remoteIndex !== siteIndex) {
                    config += `   - Network: ${remoteSite.allowedIPs || remoteSite.localNetwork}\n`;
                    config += `   - Gateway: WireGuard Interface (wg${siteIndex})\n`;
                    config += '   - Click "Save"\n';
                }
            });
        }
        config += '\n';
        
        // Firewall rules
        if (data.options?.generateFirewall) {
            config += this.generateSiteFirewallConfig(data, site, siteIndex);
        }
        
        // XML Configuration
        config += '=== XML CONFIGURATION SNIPPET ===\n';
        config += this.generateSiteXMLConfig(data, site, siteIndex);
        
        return config;
    }

    /**
     * Generate firewall configuration for client-server
     * @param {object} data Configuration data
     * @returns {string} Firewall configuration
     */
    generateFirewallConfig(data) {
        let config = '';
        
        config += '4. FIREWALL RULES:\n';
        config += '   Navigate to: Firewall > Rules > WAN\n\n';
        
        config += '   WAN Rules (Allow WireGuard traffic):\n';
        config += '   - Action: Pass\n';
        config += '   - Interface: WAN\n';
        config += '   - Protocol: UDP\n';
        config += `   - Destination Port: ${data.server.port}\n`;
        config += '   - Description: Allow WireGuard\n\n';
        
        config += '   Navigate to: Firewall > Rules > WireGuard\n';
        config += '   WireGuard Interface Rules:\n';
        config += '   - Action: Pass\n';
        config += '   - Protocol: Any\n';
        config += '   - Source: WireGuard net\n';
        config += '   - Destination: Any\n';
        config += '   - Description: Allow WireGuard clients\n\n';
        
        return config;
    }

    /**
     * Generate NAT configuration
     * @param {object} data Configuration data
     * @returns {string} NAT configuration
     */
    generateNATConfig(data) {
        let config = '';
        
        config += '5. NAT CONFIGURATION:\n';
        config += '   Navigate to: Firewall > NAT > Outbound\n';
        config += '   - Mode: Hybrid or Manual\n';
        config += '   - Add rule for WireGuard subnet:\n';
        config += '     * Interface: WAN\n';
        config += `     * Source: ${this.extractNetwork(data.server.ip)}\n`;
        config += '     * Translation: Interface address\n';
        config += '     * Description: WireGuard NAT\n\n';
        
        return config;
    }

    /**
     * Generate firewall configuration for site-to-site
     * @param {object} data Configuration data
     * @param {object} site Site data
     * @param {number} siteIndex Site index
     * @returns {string} Firewall configuration
     */
    generateSiteFirewallConfig(data, site, siteIndex) {
        let config = '';
        
        config += '5. FIREWALL RULES:\n';
        config += '   Navigate to: Firewall > Rules > WAN\n';
        config += '   - Action: Pass\n';
        config += '   - Protocol: UDP\n';
        config += `   - Destination Port: ${site.listenPort || 51820}\n`;
        config += '   - Description: Allow WireGuard Site-to-Site\n\n';
        
        config += '   Navigate to: Firewall > Rules > WireGuard\n';
        config += '   - Action: Pass\n';
        config += '   - Protocol: Any\n';
        config += '   - Source: Any\n';
        config += '   - Destination: Any\n';
        config += '   - Description: Allow site-to-site traffic\n\n';
        
        return config;
    }

    /**
     * Generate server XML configuration snippet
     * @param {object} data Configuration data
     * @returns {string} XML configuration
     */
    generateServerXMLConfig(data) {
        let xml = '';
        
        xml += '<!-- WireGuard Server Configuration -->\n';
        xml += '<wireguard>\n';
        xml += '  <server>\n';
        xml += '    <servers>\n';
        xml += '      <server>\n';
        xml += '        <enabled>1</enabled>\n';
        xml += `        <name>${data.server.name || 'WireGuard-Server'}</name>\n`;
        xml += `        <pubkey>${data.server.keys?.publicKey || '[SERVER_PUBLIC_KEY]'}</pubkey>\n`;
        xml += `        <privkey>${data.server.keys?.privateKey || '[SERVER_PRIVATE_KEY]'}</privkey>\n`;
        xml += `        <port>${data.server.port}</port>\n`;
        xml += `        <tunneladdress>${data.server.ip}</tunneladdress>\n`;
        xml += `        <dns>${data.dns?.join(',') || '1.1.1.1,8.8.8.8'}</dns>\n`;
        xml += '      </server>\n';
        xml += '    </servers>\n';
        xml += '  </server>\n';
        
        if (data.clients && data.clients.length > 0) {
            xml += '  <client>\n';
            xml += '    <clients>\n';
            data.clients.forEach((client, index) => {
                xml += '      <client>\n';
                xml += '        <enabled>1</enabled>\n';
                xml += `        <name>${client.name}</name>\n`;
                xml += `        <pubkey>${client.publicKey || '[CLIENT_PUBLIC_KEY]'}</pubkey>\n`;
                xml += `        <tunneladdress>${client.ip}</tunneladdress>\n`;
                xml += `        <serveraddress>${data.server.name || 'WireGuard-Server'}</serveraddress>\n`;
                if (client.psk) {
                    xml += `        <psk>${client.psk}</psk>\n`;
                }
                xml += '      </client>\n';
            });
            xml += '    </clients>\n';
            xml += '  </client>\n';
        }
        
        xml += '</wireguard>\n\n';
        
        return xml;
    }

    /**
     * Generate site XML configuration snippet
     * @param {object} data Configuration data
     * @param {object} site Site data
     * @param {number} siteIndex Site index
     * @returns {string} XML configuration
     */
    generateSiteXMLConfig(data, site, siteIndex) {
        let xml = '';
        
        xml += '<!-- WireGuard Site-to-Site Configuration -->\n';
        xml += '<wireguard>\n';
        xml += '  <server>\n';
        xml += '    <servers>\n';
        xml += '      <server>\n';
        xml += '        <enabled>1</enabled>\n';
        xml += `        <name>Site-${siteIndex + 1}-${site.name}</name>\n`;
        xml += `        <pubkey>${site.publicKey || '[SITE_PUBLIC_KEY]'}</pubkey>\n`;
        xml += `        <privkey>${site.privateKey || '[SITE_PRIVATE_KEY]'}</privkey>\n`;
        xml += `        <port>${site.listenPort || 51820}</port>\n`;
        xml += `        <tunneladdress>${site.localIP}</tunneladdress>\n`;
        xml += '      </server>\n';
        xml += '    </servers>\n';
        xml += '  </server>\n';
        
        if (data.sites && data.sites.length > 1) {
            xml += '  <client>\n';
            xml += '    <clients>\n';
            data.sites.forEach((remoteSite, remoteIndex) => {
                if (remoteIndex !== siteIndex) {
                    xml += '      <client>\n';
                    xml += '        <enabled>1</enabled>\n';
                    xml += `        <name>Site-${remoteIndex + 1}-${remoteSite.name}</name>\n`;
                    xml += `        <pubkey>${remoteSite.publicKey || '[REMOTE_SITE_PUBLIC_KEY]'}</pubkey>\n`;
                    xml += `        <tunneladdress>${remoteSite.allowedIPs || remoteSite.localNetwork}</tunneladdress>\n`;
                    xml += `        <endpoint>${remoteSite.publicEndpoint}:${remoteSite.listenPort || 51820}</endpoint>\n`;
                    xml += `        <serveraddress>Site-${siteIndex + 1}-${site.name}</serveraddress>\n`;
                    if (remoteSite.psk) {
                        xml += `        <psk>${remoteSite.psk}</psk>\n`;
                    }
                    if (data.options?.keepalive && data.options.keepalive > 0) {
                        xml += `        <keepalive>${data.options.keepalive}</keepalive>\n`;
                    }
                    xml += '      </client>\n';
                }
            });
            xml += '    </clients>\n';
            xml += '  </client>\n';
        }
        
        xml += '</wireguard>\n\n';
        
        return xml;
    }

    /**
     * Extract network from IP/CIDR
     * @param {string} ip IP address with CIDR
     * @returns {string} Network address
     */
    extractNetwork(ip) {
        if (!ip || !ip.includes('/')) return ip;
        
        const [addr, cidr] = ip.split('/');
        const octets = addr.split('.').map(Number);
        const mask = cidr ? parseInt(cidr) : 24;
        
        // Simple network calculation for common subnets
        if (mask >= 24) {
            return `${octets[0]}.${octets[1]}.${octets[2]}.0/${mask}`;
        } else if (mask >= 16) {
            return `${octets[0]}.${octets[1]}.0.0/${mask}`;
        } else if (mask >= 8) {
            return `${octets[0]}.0.0.0/${mask}`;
        }
        
        return ip;
    }
}

// Create global instance
window.OPNsenseGenerator = new OPNsenseGenerator();

// Export for module systems if needed
if (typeof module !== 'undefined' && module.exports) {
    module.exports = OPNsenseGenerator;
}